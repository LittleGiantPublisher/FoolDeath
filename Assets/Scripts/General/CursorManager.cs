using UnityEngine;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.UI;
using UnityEngine.UI;
using UnityEngine.EventSystems;
using System.Collections.Generic;

namespace F
{
    //[RequireComponent(typeof(VirtualMouseInput))]
    public class CursorManager : MonoBehaviour
    {
        public static CursorManager Instance { get; private set; }

        [SerializeField] private Texture2D defaultCursor;
        [SerializeField] private Canvas uiCanvas;
        // [SerializeField] public RectTransform uiCursor; // disabled uiCursor handling
        [SerializeField] public float gamepadCursorSpeed = 1000f;
        [SerializeField] public float cardCursorSpeed = 100f;

        private FDPlayerInput controls;
        // private VirtualMouseInput virtualMouse; // disabled virtual mouse for now
        private EventSystem eventSystem;
        public InputSystemUIInputModule uiModule;

        private bool isOSCursorActive;
        private bool isUICursorActive;
        public bool IsUICursorActive => isUICursorActive;
        public bool IsAnyCursorActive => (isUICursorActive || isOSCursorActive);
        private Vector2 gamepadCursorScreenPos;

        private void Awake()
        {
            // enforce singleton pattern
            if (Instance != null)
            {
                Destroy(gameObject);
                return;
            }
            Instance = this;
            DontDestroyOnLoad(gameObject);

            // initialize InputSystem actions
            controls = new FDPlayerInput();
            controls.Enable();

            // get the UI input module from the active EventSystem
            eventSystem = EventSystem.current;
            uiModule = eventSystem.GetComponent<InputSystemUIInputModule>();

            /*
            // configure the VirtualMouseInput component
            virtualMouse = GetComponent<VirtualMouseInput>();
            virtualMouse.stickAction = new InputActionProperty(controls.Player.Look);
            virtualMouse.backButtonAction = new InputActionProperty(controls.UI.Click);
            virtualMouse.forwardButtonAction = new InputActionProperty(controls.UI.Cancel);
            virtualMouse.cursorGraphic = uiCursor.GetComponent<Graphic>();
            virtualMouse.cursorTransform = uiCursor;
            virtualMouse.cursorSpeed = gamepadCursorSpeed;
            virtualMouse.cursorMode = VirtualMouseInput.CursorMode.SoftwareCursor;
            */

            // subscribe to input events for cursor control
            //controls.Player.Look.performed += OnLookUsed;
            controls.UI.Point.performed += OnMousePoint;
            controls.UI.Navigate.performed += OnNavigate;

            SetCursorSprite(null);

            // start with the OS cursor visible
            // uiCursor.gameObject.SetActive(false); // disabled
            ShowMouseCursor();
        }

        private void OnDestroy()
        {
            if (controls == null) return;

            // unsubscribe from input events
            //controls.Player.Look.performed -= OnLookUsed;
            controls.UI.Point.performed -= OnMousePoint;
            controls.UI.Navigate.performed -= OnNavigate;
            controls.Disable();
        }

        private void OnLookUsed(InputAction.CallbackContext ctx)
        {
            // only respond to real gamepad stick movements
            if (!(ctx.control.device is Gamepad) || ctx.phase != InputActionPhase.Performed)
                return;

            Vector2 delta = ctx.ReadValue<Vector2>();
            if (delta.sqrMagnitude < 0.01f)
                return; // ignore minor drift

            ShowGamepadCursor();
        }

        private void OnMousePoint(InputAction.CallbackContext ctx)
        {
            // identify the device that generated the event
            var device = ctx.control.device;

            /*
            // ignore input generated by our virtual mouse
            if (virtualMouse.virtualMouse != null && device == virtualMouse.virtualMouse)
                return;
            */

            // switch back to the OS cursor
            ShowMouseCursor();
        }

        private void OnNavigate(InputAction.CallbackContext ctx)
        {
            if (!eventSystem.sendNavigationEvents) return;
            if (ctx.ReadValue<Vector2>().sqrMagnitude > 0f)
                HideCursors();
        }

        public void ShowGamepadCursor()
        {
            return;
            if (isUICursorActive) return;

            // clear any current selection when switching to virtual cursor
            eventSystem.SetSelectedGameObject(null);

            //Cursor.lockState = CursorLockMode.None;

            Cursor.visible = false;
            // uiCursor.SetParent(uiCanvas.transform, false);
            // uiCursor.gameObject.SetActive(true);
            isUICursorActive = true;
            isOSCursorActive = false;
        }

        public void ShowMouseCursor()
        {
            if (isOSCursorActive) return;

            //Cursor.lockState = CursorLockMode.None;

            // clear any current selection when switching to OS cursor
            eventSystem.SetSelectedGameObject(null);

            Cursor.visible = true;
            // uiCursor.gameObject.SetActive(false);
            Cursor.SetCursor(defaultCursor, Vector2.zero, CursorMode.Auto);
            isOSCursorActive = true;
            isUICursorActive = false;
        }

        public void HideCursors()
        {
            //Cursor.lockState = CursorLockMode.Locked;
            Cursor.visible = false;
            // uiCursor.gameObject.SetActive(false);
            isOSCursorActive = false;
            isUICursorActive = false;
        }

        public void UpdateCursorPosition(Vector2 screenPos)
        {
            if (!isUICursorActive) return;
            /*
            RectTransformUtility.ScreenPointToLocalPointInRectangle(
                uiCanvas.GetComponent<RectTransform>(),
                screenPos,
                uiCanvas.renderMode == RenderMode.ScreenSpaceOverlay ? null : uiCanvas.worldCamera,
                out Vector2 local
            );
            uiCursor.anchoredPosition = local;
            */
        }

        public void SetCursorSprite(Texture2D tex)
        {
            var toUse = tex ?? defaultCursor;
            Vector2 hotspot = new Vector2(toUse.width/2f, toUse.height/2f);
            Cursor.SetCursor(toUse, hotspot, CursorMode.ForceSoftware);
                
            // var sprite = Sprite.Create(
            //     tex,
            //     new Rect(0, 0, tex.width, tex.height),
            //     new Vector2(0.5f, 0.5f),
            //     /* pixelsPerUnit */ 1f
            // );
            // var img = uiCursor.GetComponent<Image>();
            // if (img != null)
            //     img.sprite = sprite;
        }
    }
}
